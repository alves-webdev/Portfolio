$orbitItemSize: 1.8em;
$map: (ring-0: 4, ring-1: 3, ring-2: 8, ring-3: 3);
$lastRing: 3;

.orbit{
  position: relative;
  width: 28em;
  height: 28em;
  list-style: none;
  z-index: 1;
}

.orbit-icon {
  width: $orbitItemSize;
  height: $orbitItemSize;
  line-height: $orbitItemSize;
  font-size: 1em;
  border-radius: 50%;
  text-align: center;
  display: block;
}

.orbit-wrap {
  list-style: none;
  font-size: 1.7em;
  
  > li {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    
    &:hover {
      ul {
        border-width: 2px;
        border-color: #fff;
      }
      ~ li ul {
        border-color: rgba(255, 255, 255, 0.2);
        li {
          opacity: 0.4;          
        }
      }
    }
    
  }
}

ul[class^=ring] {
  @extend %ring;
  transition: all 300ms ease-in-out;
  li {
    @extend %orbiting-object;
    transition: all 300ms ease-in-out;
  }
}

@mixin orbit-item($numItems, $numRing) {
  @for $s from 1 through $numItems {  
    // Spread items over the ring
    $deg: 380deg / $numItems;
    
    .ring-#{$numRing} > *:nth-of-type(#{$s}) {
      transform: rotate($s * $deg) translate(12.5em - ($numRing * 2.5)) rotate(-$s * $deg);
    }
  }
}

// Render rings
@for $i from 0 through $lastRing {  
  .ring-#{$i} {
    // decrease each ring in size
    width: 25em - ($i * 5);
    height: 25em - ($i * 5);
    animation: clockwiseRotate 35s - ($i * 5) linear infinite;
    
    i {
      animation: counterClockwiseRotate 35s - ($i * 5) linear infinite;
    }
  }
  
  @include orbit-item(map-get($map, ring-#{$i}), $i);
}

%ring {
  border: solid 1px rgba(33, 150, 243, 0.8);
  position: relative;
  padding: 0;
  border-radius: 50%;
  list-style: none;
  box-sizing: content-box;
}

%orbiting-object {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  width: $orbitItemSize;
  height: $orbitItemSize;
  margin: -$orbitItemSize / 2;
}

.orbit-center {
  z-index: 5;
  font-size: 2em;
  width: 3.9em;
  height: 3.9em;
  line-height: 1.8em;
  text-align: center;
  background: #29335c;
  border-radius: 50%;
}
.orbit-image {
  object-fit: contain;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background-size: cover;
  background-position: center;
}
.orbit-center__icon {
  transform: rotateZ(-360deg);
  transition: all 300ms ease-in-out;
}

.orbit-icon.javascript {
  color: #d8c533;
}
.orbit-icon.css {
  color: #2965f1;
}

.orbit-icon.html {
  color: #f06529;
}

.orbit-icon.git {
  color: #f34f29;
}

.orbit-icon.postgres {
  color: #336791;
}

.orbit-icon.mongodb {
  color: #4db33d;
}

.orbit-icon.mysql {
  color: #00758f;
}

.orbit-icon.vscode {
  color: #007acc;
}

.orbit-icon.react {
  color: #61dafb;
}

.orbit-icon.nodejs {
  color: #339933;
}

.orbit-wrap > li.orbit-center:hover ~ li > ul {
  width: 0;
  height: 0;
  * {
    transform: translate(0, 0);
  }
}

@keyframes clockwiseRotate {
    from {
        transform: rotate(0deg)
    }
    to {
        transform: rotate(360deg)
    }
}

@keyframes counterClockwiseRotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
      transform: rotate(-360deg);
  }
}

@media (max-width: 768px) {
  .orbit-wrap{
    font-size: 1.3em !important;
  }
}